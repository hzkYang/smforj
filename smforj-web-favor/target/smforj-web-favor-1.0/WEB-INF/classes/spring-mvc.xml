<?xml version="1.0" encoding="UTF-8"?>
<!-- 该文件早于spring-config.xml文件加载 -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation=" 
	http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
     
     
    <!-- 扫描控制器类controller -->
	<context:component-scan base-package="com.smforj.ssm/**/web/controller/**" />   
	<!-- 配置静态资源 -->
	<mvc:resources location="/resources/" mapping="/resources/**" /> 
	<!-- aop一定要配置在mvc文件中，因为它加载早于config -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
     <!-- 拦截器 -->
     <mvc:interceptors>  
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求  --> 
        <bean id="ji18nInterceptor" class="com.smforj.ssm.frame.core.interceptor.JI18nInterceptor"/>
        <!-- 拦截需要渲染的Action -->
        <mvc:interceptor>
           <mvc:mapping path="/**" />   
           <bean id="commonInterceptor" class="com.smforj.ssm.frame.core.interceptor.RenderInterceptor"/>
        </mvc:interceptor>
        
        <!-- <bean id="oauth2Interceptor" class="com.smforj.ssm.wechat.interceptor.OAuth2Interceptor"> -->
    <!--     <bean id="loginInterceptor" class="com.smforj.ssm.frame.core.interceptor.LoginInterceptor"></bean>
        <mvc:interceptor>  
            <mvc:mapping path="/com.smforj.ssm.contorller"/>  
             定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的  
            <ref bean="loginInterceptor"/>  
        </mvc:interceptor>   -->
        <!--    OAuth2拦截器  -->
<!--         <mvc:interceptor> 
			对所有的请求拦截使用/** ,对某个模块下的请求拦截使用：/myPath/*
			<mvc:mapping path="/**" /> 
			<bean class="com.smforj.ssm.wechat.interceptor.OAuth2Interceptor"/>
		</mvc:interceptor>   --> 
    </mvc:interceptors>   

	<!-- XML转码器 -->
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />

	<!-- 配置freeMarker的模板路径 -->
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="configLocation" value="classpath:freemarker.properties" />
		<property name="templateLoaderPath" value="/WEB-INF/ftl/templetes/" /> 
		<property name="freemarkerVariables">
			<map>
				<entry key="xml_escape" value-ref="fmXmlEscape" />
			</map>
		</property>
	</bean>

	<!-- 配置freeMarker视图解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" /> 
		<property name="contentType" value="text/html; charset=utf-8" />
		<property name="cache" value="true" />
		<property name="suffix" value=".ftl" />
		<property name="order" value="0" />  

		<property name="requestContextAttribute" value="request" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<property name="allowSessionOverride" value="true" />
	</bean>


	<!-- jsp视图解析器 -->
	<bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/templetes/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" /> 
	</bean> 

	<!-- 采用注解方式配置MVC -->
	<mvc:annotation-driven  content-negotiation-manager="contentNegotiationManager">
		<mvc:argument-resolvers>
			<bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="favorPathExtension" value="true" />
	    <property name="favorParameter" value="true" />
	    <property name="defaultContentType" value="text/html"/>
	    <property name="mediaTypes" >
	        <value>
	            json=application/json
	            xml=application/xml
	        </value>
	    </property>
	</bean>

</beans>
	
	